
	16 bit general purpose registers with 8 bit halves
		A - A AH AL
		B - B BH BL
		C - C CH CL
		D - D DH DL
	
	16 bit index registers
		I
		J
		K
		L
	
	32 bit address registers
		Stack Pointer SP
		Base Pointer BP
	
	Special purpose registers
		Instruction Pointer IP (32 bit)
			not accessed directly
		
		Arithmetic Flags F (16 bit)
			support push/pop & bitwise operations
		
		Processor Flags PF (16 bit)
			can be moved
	
	Instructions are encoded as:
	{Opcode} [RIM] [BIO] [Immediate] [EI8]
	
	F layout
	|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
	|  F |  E |  D |  C |  B |  A |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
	|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
	| Z3 | O3 | S3 | C3 | Z2 | O2 | S2 | C2 | Z1 | O1 | S1 | C1 | Z0 | O0 | S0 | C0 | packed 4s
	|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
	|                   | Z1 | O1 | S1 | C1 |                   | Z0 | O0 | S0 | C0 | packed 8s
	|-------------------|----|----|----|----|-------------------|----|----|----|----|
	|                                                           | Z0 | O0 | S0 | C0 | 8/16 bit, conditions
	|-----------------------------------------------------------|----|----|----|----|
	
	PF layout
	|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
	|  F |  E |  D |  C |  B |  A |  9 |  8 |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  0 |
	|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
	|                                                                          | IE |
	|--------------------------------------------------------------------------|----|
	IE: Interrupt Enable (default 1). If 1, maskable interrupts are allowed. If 0, maskable interrupts are ignored
	
	
	rim bytes
	|---|---|---|---|---|---|---|---|
	| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	|---|---|---|---|---|---|---|---|
	| s | r |       reg |       rim |
	|---|---|-----------|-----------|
	
	r rim type:	0 = register-register, 1 = register-immediate/register-memory
	
	size	normal	wide	packed
	0		16 bit	32 bit	2x8
	1		8 bit	16 bit 	4x4
	
	bio
	|---|---|---|---|---|---|---|---|
	| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
	|---|---|---|---|---|---|---|---|
	| scale | pair base | r16 index |
	|-------|-----------|-----------|
	
	value	reg					immediate/memory
			16  8	pair
	000		A	AL	D:A			immediate value source
	001		B	BL	A:B			immediate address source
	010		C	CL	B:C			base + index source
	011		D	DL	C:D			base + index + offset source
	100		I	AH	J:I			???
	101		J	BH	L:K			immediate address destination
	110		K	CH	BP			base + index destination
	111		L	DH	SP/none		base + index + offset destination
	
	value	scale	index
	00		0		1 byte offset
	01		1		2 byte offset
	10		2		3 byte offset
	11		4		4 byte offset
	
	the reg field is the destination unless rim is a memory destination
	
	address = base + (index * scale) + offset
	If scale != 0, the index field specifies the index as an r16.
	If scale = 0, the lower 2 bits of index specify the number of bytes of the offset if it is present.
	If the most significant bit of index = 0, the base field is used as usual.
	If the most significant bit of index = 1, the base is set to IP and the base field is used to
	specify the index register. Registers A, B, C, and D are treated as no index in this case. As
	with relative jumps, IP will point to the first byte of the next instruction.
	
	
	If scale = 0 and the most significant bit of index = 0, the lower 2 bits of index + 1 specifies
	the number of bytes of the offset, if it is present. If there is also no base, this value is ignored
	and the offset is 4 bytes wide.
	If scale = 0 and the most significant bit of index = 1, the base is 
	
	As an argument, pair 111 is always SP
	As a base, pair 111 is none if there is an index and SP if there is not
	
	MOVW uses pairs for both sources and destinations.
	Wide destination operations use wide destinations and normal sources.
	MOVS sign extends, and MOVZ zero extends.
	
	For division, the carry and overflow flags are set appropriately if the quotient is too
	large for the destination. The zero flag is set if both quotient and remainder (if applicible)
	are zero. The sign flag is set according to the quotient. Quotient goes in the low half and
	remainder goes in the high half
	
	Interrupts push IP, then flags, then jump to the address at [arg * 4]
	Made for interrupts, PUSHA pushes, in order, A, B, C, D, I, J, K, L, BP. POPA pops the equivalent.
	The HLT instruction halts execution until an interrupt is received
		
	Conditions match x86
	
	
	Packed division returns the packed quotients in the lower register and packed remainders in the
	upper register.
	Packed low multiplication returns its results in place.
	Packed high multiplication returns its values in wide form - i.e. words for 8s and 8s for 4s.
	
	The memory-rim value 100 (???) is not strictly defined. However, if the immediate value source
	is considered as memory pointing to the defined immediate value, it can also be used as a destination,
	making 100 a valid value and 000 a valid value for the XCHG instruction.
	
	